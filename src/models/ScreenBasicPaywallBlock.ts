/* tslint:disable */
/* eslint-disable */
/**
 * Onboarding online screens graph models
 * Onboarding online screens graph models and interfaces
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BackgroundStyle } from './BackgroundStyle';
import {
    BackgroundStyleFromJSON,
    BackgroundStyleFromJSONTyped,
    BackgroundStyleToJSON,
} from './BackgroundStyle';
import type { RgbaShadowMask } from './RgbaShadowMask';
import {
    RgbaShadowMaskFromJSON,
    RgbaShadowMaskFromJSONTyped,
    RgbaShadowMaskToJSON,
} from './RgbaShadowMask';

/**
 * 
 * @export
 * @interface ScreenBasicPaywallBlock
 */
export interface ScreenBasicPaywallBlock {
    /**
     * 
     * @type {BackgroundStyle}
     * @memberof ScreenBasicPaywallBlock
     */
    background: BackgroundStyle;
    /**
     * Padding left for body
     * @type {number}
     * @memberof ScreenBasicPaywallBlock
     */
    paddingLeft?: number;
    /**
     * Padding right for body
     * @type {number}
     * @memberof ScreenBasicPaywallBlock
     */
    paddingRight?: number;
    /**
     * Padding top for body
     * @type {number}
     * @memberof ScreenBasicPaywallBlock
     */
    paddingTop?: number;
    /**
     * Padding bottom for body
     * @type {number}
     * @memberof ScreenBasicPaywallBlock
     */
    paddingBottom?: number;
    /**
     * 
     * @type {string}
     * @memberof ScreenBasicPaywallBlock
     */
    bodyColor?: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenBasicPaywallBlock
     */
    bodyOpacity?: string;
    /**
     * 
     * @type {RgbaShadowMask}
     * @memberof ScreenBasicPaywallBlock
     */
    bodyShadowMask?: RgbaShadowMask;
}

/**
 * Check if a given object implements the ScreenBasicPaywallBlock interface.
 */
export function instanceOfScreenBasicPaywallBlock(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "background" in value;

    return isInstance;
}

export function ScreenBasicPaywallBlockFromJSON(json: any): ScreenBasicPaywallBlock {
    return ScreenBasicPaywallBlockFromJSONTyped(json, false);
}

export function ScreenBasicPaywallBlockFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScreenBasicPaywallBlock {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'background': BackgroundStyleFromJSON(json['background']),
        'paddingLeft': !exists(json, 'paddingLeft') ? undefined : json['paddingLeft'],
        'paddingRight': !exists(json, 'paddingRight') ? undefined : json['paddingRight'],
        'paddingTop': !exists(json, 'paddingTop') ? undefined : json['paddingTop'],
        'paddingBottom': !exists(json, 'paddingBottom') ? undefined : json['paddingBottom'],
        'bodyColor': !exists(json, 'bodyColor') ? undefined : json['bodyColor'],
        'bodyOpacity': !exists(json, 'bodyOpacity') ? undefined : json['bodyOpacity'],
        'bodyShadowMask': !exists(json, 'bodyShadowMask') ? undefined : RgbaShadowMaskFromJSON(json['bodyShadowMask']),
    };
}

export function ScreenBasicPaywallBlockToJSON(value?: ScreenBasicPaywallBlock | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'background': BackgroundStyleToJSON(value.background),
        'paddingLeft': value.paddingLeft,
        'paddingRight': value.paddingRight,
        'paddingTop': value.paddingTop,
        'paddingBottom': value.paddingBottom,
        'bodyColor': value.bodyColor,
        'bodyOpacity': value.bodyOpacity,
        'bodyShadowMask': RgbaShadowMaskToJSON(value.bodyShadowMask),
    };
}

