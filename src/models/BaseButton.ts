/* tslint:disable */
/* eslint-disable */
/**
 * Onboarding online screens graph models
 * Onboarding online screens graph models and interfaces
 *
 * The version of the OpenAPI document: 1.1.0-alpha.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Action } from './Action';
import {
    ActionFromJSON,
    ActionFromJSONTyped,
    ActionToJSON,
} from './Action';
import type { BaseButtonContent } from './BaseButtonContent';
import {
    BaseButtonContentFromJSON,
    BaseButtonContentFromJSONTyped,
    BaseButtonContentToJSON,
} from './BaseButtonContent';
import type { ButtonBlock } from './ButtonBlock';
import {
    ButtonBlockFromJSON,
    ButtonBlockFromJSONTyped,
    ButtonBlockToJSON,
} from './ButtonBlock';
import type { ButtonKind } from './ButtonKind';
import {
    ButtonKindFromJSON,
    ButtonKindFromJSONTyped,
    ButtonKindToJSON,
} from './ButtonKind';

/**
 * Base button parameters
 * @export
 * @interface BaseButton
 */
export interface BaseButton {
    /**
     * 
     * @type {ButtonKind}
     * @memberof BaseButton
     */
    kind: ButtonKind;
    /**
     * 
     * @type {BaseButtonContent}
     * @memberof BaseButton
     */
    content: BaseButtonContent;
    /**
     * 
     * @type {ButtonBlock}
     * @memberof BaseButton
     */
    styles: ButtonBlock;
    /**
     * 
     * @type {Action}
     * @memberof BaseButton
     */
    action: Action;
}

/**
 * Check if a given object implements the BaseButton interface.
 */
export function instanceOfBaseButton(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "kind" in value;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "styles" in value;
    isInstance = isInstance && "action" in value;

    return isInstance;
}

export function BaseButtonFromJSON(json: any): BaseButton {
    return BaseButtonFromJSONTyped(json, false);
}

export function BaseButtonFromJSONTyped(json: any, ignoreDiscriminator: boolean): BaseButton {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'kind': ButtonKindFromJSON(json['kind']),
        'content': BaseButtonContentFromJSON(json['content']),
        'styles': ButtonBlockFromJSON(json['styles']),
        'action': ActionFromJSON(json['action']),
    };
}

export function BaseButtonToJSON(value?: BaseButton | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'kind': ButtonKindToJSON(value.kind),
        'content': BaseButtonContentToJSON(value.content),
        'styles': ButtonBlockToJSON(value.styles),
        'action': ActionToJSON(value.action),
    };
}

