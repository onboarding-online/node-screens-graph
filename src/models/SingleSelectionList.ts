/* tslint:disable */
/* eslint-disable */
/**
 * Onboarding online screens graph models
 * Onboarding online screens graph models and interfaces
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Box } from './Box';
import {
    BoxFromJSON,
    BoxFromJSONTyped,
    BoxToJSON,
} from './Box';
import type { ItemTypeSelection } from './ItemTypeSelection';
import {
    ItemTypeSelectionFromJSON,
    ItemTypeSelectionFromJSONTyped,
    ItemTypeSelectionToJSON,
} from './ItemTypeSelection';
import type { ListBlock } from './ListBlock';
import {
    ListBlockFromJSON,
    ListBlockFromJSONTyped,
    ListBlockToJSON,
} from './ListBlock';
import type { SelectedListItemBlock } from './SelectedListItemBlock';
import {
    SelectedListItemBlockFromJSON,
    SelectedListItemBlockFromJSONTyped,
    SelectedListItemBlockToJSON,
} from './SelectedListItemBlock';
import type { SingleSelectionListItemType } from './SingleSelectionListItemType';
import {
    SingleSelectionListItemTypeFromJSON,
    SingleSelectionListItemTypeFromJSONTyped,
    SingleSelectionListItemTypeToJSON,
} from './SingleSelectionListItemType';

/**
 * Single selection list element
 * @export
 * @interface SingleSelectionList
 */
export interface SingleSelectionList {
    /**
     * 
     * @type {SingleSelectionListItemType}
     * @memberof SingleSelectionList
     */
    itemType: SingleSelectionListItemType;
    /**
     * Item rows
     * @type {Array<ItemTypeSelection>}
     * @memberof SingleSelectionList
     */
    items: Array<ItemTypeSelection>;
    /**
     * 
     * @type {ListBlock}
     * @memberof SingleSelectionList
     */
    styles: ListBlock;
    /**
     * 
     * @type {SelectedListItemBlock}
     * @memberof SingleSelectionList
     */
    selectedBlock: SelectedListItemBlock;
    /**
     * 
     * @type {Box}
     * @memberof SingleSelectionList
     */
    box: Box;
}

/**
 * Check if a given object implements the SingleSelectionList interface.
 */
export function instanceOfSingleSelectionList(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "itemType" in value;
    isInstance = isInstance && "items" in value;
    isInstance = isInstance && "styles" in value;
    isInstance = isInstance && "selectedBlock" in value;
    isInstance = isInstance && "box" in value;

    return isInstance;
}

export function SingleSelectionListFromJSON(json: any): SingleSelectionList {
    return SingleSelectionListFromJSONTyped(json, false);
}

export function SingleSelectionListFromJSONTyped(json: any, ignoreDiscriminator: boolean): SingleSelectionList {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'itemType': SingleSelectionListItemTypeFromJSON(json['itemType']),
        'items': ((json['items'] as Array<any>).map(ItemTypeSelectionFromJSON)),
        'styles': ListBlockFromJSON(json['styles']),
        'selectedBlock': SelectedListItemBlockFromJSON(json['selectedBlock']),
        'box': BoxFromJSON(json['box']),
    };
}

export function SingleSelectionListToJSON(value?: SingleSelectionList | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'itemType': SingleSelectionListItemTypeToJSON(value.itemType),
        'items': ((value.items as Array<any>).map(ItemTypeSelectionToJSON)),
        'styles': ListBlockToJSON(value.styles),
        'selectedBlock': SelectedListItemBlockToJSON(value.selectedBlock),
        'box': BoxToJSON(value.box),
    };
}

