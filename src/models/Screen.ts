/* tslint:disable */
/* eslint-disable */
/**
 * Onboarding online screens graph models
 * Onboarding online screens graph models and interfaces
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PositionOnConfigurator } from './PositionOnConfigurator';
import {
    PositionOnConfiguratorFromJSON,
    PositionOnConfiguratorFromJSONTyped,
    PositionOnConfiguratorToJSON,
} from './PositionOnConfigurator';
import type { ScreenStruct } from './ScreenStruct';
import {
    ScreenStructFromJSON,
    ScreenStructFromJSONTyped,
    ScreenStructToJSON,
} from './ScreenStruct';
import type { ScreenType } from './ScreenType';
import {
    ScreenTypeFromJSON,
    ScreenTypeFromJSONTyped,
    ScreenTypeToJSON,
} from './ScreenType';

/**
 * 
 * @export
 * @interface Screen
 */
export interface Screen {
    /**
     * 
     * @type {string}
     * @memberof Screen
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Screen
     */
    name: string;
    /**
     * Screen tags
     * @type {Array<string>}
     * @memberof Screen
     */
    tags: Array<string>;
    /**
     * 
     * @type {ScreenType}
     * @memberof Screen
     */
    screenType: ScreenType;
    /**
     * 
     * @type {ScreenStruct}
     * @memberof Screen
     */
    struct: ScreenStruct;
    /**
     * 
     * @type {PositionOnConfigurator}
     * @memberof Screen
     */
    position: PositionOnConfigurator;
}

/**
 * Check if a given object implements the Screen interface.
 */
export function instanceOfScreen(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "tags" in value;
    isInstance = isInstance && "screenType" in value;
    isInstance = isInstance && "struct" in value;
    isInstance = isInstance && "position" in value;

    return isInstance;
}

export function ScreenFromJSON(json: any): Screen {
    return ScreenFromJSONTyped(json, false);
}

export function ScreenFromJSONTyped(json: any, ignoreDiscriminator: boolean): Screen {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'tags': json['tags'],
        'screenType': ScreenTypeFromJSON(json['screenType']),
        'struct': ScreenStructFromJSON(json['struct']),
        'position': PositionOnConfiguratorFromJSON(json['position']),
    };
}

export function ScreenToJSON(value?: Screen | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'tags': value.tags,
        'screenType': ScreenTypeToJSON(value.screenType),
        'struct': ScreenStructToJSON(value.struct),
        'position': PositionOnConfiguratorToJSON(value.position),
    };
}

