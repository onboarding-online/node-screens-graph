/* tslint:disable */
/* eslint-disable */
/**
 * Onboarding online screens graph models
 * Onboarding online screens graph models and interfaces
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Media } from './Media';
import {
    MediaFromJSON,
    MediaFromJSONTyped,
    MediaToJSON,
} from './Media';
import type { MultipleSelectionList } from './MultipleSelectionList';
import {
    MultipleSelectionListFromJSON,
    MultipleSelectionListFromJSONTyped,
    MultipleSelectionListToJSON,
} from './MultipleSelectionList';
import type { Text } from './Text';
import {
    TextFromJSON,
    TextFromJSONTyped,
    TextToJSON,
} from './Text';

/**
 * Screen table multiple selection - Title/Subtitle/Selection list
 * @export
 * @interface ScreenTableMultipleSelectionAllOf
 */
export interface ScreenTableMultipleSelectionAllOf {
    /**
     * 
     * @type {string}
     * @memberof ScreenTableMultipleSelectionAllOf
     */
    multipleSelectionDescription: string;
    /**
     * 
     * @type {Media}
     * @memberof ScreenTableMultipleSelectionAllOf
     */
    media?: Media;
    /**
     * 
     * @type {Text}
     * @memberof ScreenTableMultipleSelectionAllOf
     */
    title: Text;
    /**
     * 
     * @type {Text}
     * @memberof ScreenTableMultipleSelectionAllOf
     */
    subtitle: Text;
    /**
     * 
     * @type {MultipleSelectionList}
     * @memberof ScreenTableMultipleSelectionAllOf
     */
    list: MultipleSelectionList;
}

/**
 * Check if a given object implements the ScreenTableMultipleSelectionAllOf interface.
 */
export function instanceOfScreenTableMultipleSelectionAllOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "multipleSelectionDescription" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "subtitle" in value;
    isInstance = isInstance && "list" in value;

    return isInstance;
}

export function ScreenTableMultipleSelectionAllOfFromJSON(json: any): ScreenTableMultipleSelectionAllOf {
    return ScreenTableMultipleSelectionAllOfFromJSONTyped(json, false);
}

export function ScreenTableMultipleSelectionAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScreenTableMultipleSelectionAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'multipleSelectionDescription': json['multipleSelectionDescription'],
        'media': !exists(json, 'media') ? undefined : MediaFromJSON(json['media']),
        'title': TextFromJSON(json['title']),
        'subtitle': TextFromJSON(json['subtitle']),
        'list': MultipleSelectionListFromJSON(json['list']),
    };
}

export function ScreenTableMultipleSelectionAllOfToJSON(value?: ScreenTableMultipleSelectionAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'multipleSelectionDescription': value.multipleSelectionDescription,
        'media': MediaToJSON(value.media),
        'title': TextToJSON(value.title),
        'subtitle': TextToJSON(value.subtitle),
        'list': MultipleSelectionListToJSON(value.list),
    };
}

