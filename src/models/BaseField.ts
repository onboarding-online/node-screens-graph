/* tslint:disable */
/* eslint-disable */
/**
 * Onboarding online screens graph models
 * Onboarding online screens graph models and interfaces
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BaseText } from './BaseText';
import {
    BaseTextFromJSON,
    BaseTextFromJSONTyped,
    BaseTextToJSON,
} from './BaseText';
import type { FieldBlock } from './FieldBlock';
import {
    FieldBlockFromJSON,
    FieldBlockFromJSONTyped,
    FieldBlockToJSON,
} from './FieldBlock';
import type { FieldType } from './FieldType';
import {
    FieldTypeFromJSON,
    FieldTypeFromJSONTyped,
    FieldTypeToJSON,
} from './FieldType';

/**
 * Base field element
 * @export
 * @interface BaseField
 */
export interface BaseField {
    /**
     * 
     * @type {FieldType}
     * @memberof BaseField
     */
    type: FieldType;
    /**
     * 
     * @type {BaseText}
     * @memberof BaseField
     */
    placeholder: BaseText;
    /**
     * Field value
     * @type {string}
     * @memberof BaseField
     */
    value: string;
    /**
     * 
     * @type {FieldBlock}
     * @memberof BaseField
     */
    styles: FieldBlock;
}

/**
 * Check if a given object implements the BaseField interface.
 */
export function instanceOfBaseField(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "placeholder" in value;
    isInstance = isInstance && "value" in value;
    isInstance = isInstance && "styles" in value;

    return isInstance;
}

export function BaseFieldFromJSON(json: any): BaseField {
    return BaseFieldFromJSONTyped(json, false);
}

export function BaseFieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): BaseField {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': FieldTypeFromJSON(json['type']),
        'placeholder': BaseTextFromJSON(json['placeholder']),
        'value': json['value'],
        'styles': FieldBlockFromJSON(json['styles']),
    };
}

export function BaseFieldToJSON(value?: BaseField | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': FieldTypeToJSON(value.type),
        'placeholder': BaseTextToJSON(value.placeholder),
        'value': value.value,
        'styles': FieldBlockToJSON(value.styles),
    };
}

