/* tslint:disable */
/* eslint-disable */
/**
 * Onboarding online screens graph models
 * Onboarding online screens graph models and interfaces
 *
 * The version of the OpenAPI document: 1.1.0-alpha.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Asset } from './Asset';
import {
    AssetFromJSON,
    AssetFromJSONTyped,
    AssetToJSON,
} from './Asset';
import type { Box } from './Box';
import {
    BoxFromJSON,
    BoxFromJSONTyped,
    BoxToJSON,
} from './Box';
import type { ImageBlock } from './ImageBlock';
import {
    ImageBlockFromJSON,
    ImageBlockFromJSONTyped,
    ImageBlockToJSON,
} from './ImageBlock';

/**
 * Image parameters
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * 
     * @type {Box}
     * @memberof Image
     */
    box: Box;
    /**
     * Dictionary of localized Asset
     * @type {{ [key: string]: Asset; }}
     * @memberof Image
     */
    l10n: { [key: string]: Asset; };
    /**
     * 
     * @type {ImageBlock}
     * @memberof Image
     */
    styles: ImageBlock;
}

/**
 * Check if a given object implements the Image interface.
 */
export function instanceOfImage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "box" in value;
    isInstance = isInstance && "l10n" in value;
    isInstance = isInstance && "styles" in value;

    return isInstance;
}

export function ImageFromJSON(json: any): Image {
    return ImageFromJSONTyped(json, false);
}

export function ImageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Image {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'box': BoxFromJSON(json['box']),
        'l10n': (mapValues(json['l10n'], AssetFromJSON)),
        'styles': ImageBlockFromJSON(json['styles']),
    };
}

export function ImageToJSON(value?: Image | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'box': BoxToJSON(value.box),
        'l10n': (mapValues(value.l10n, AssetToJSON)),
        'styles': ImageBlockToJSON(value.styles),
    };
}

