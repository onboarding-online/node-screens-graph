/* tslint:disable */
/* eslint-disable */
/**
 * Onboarding online screens graph models
 * Onboarding online screens graph models and interfaces
 *
 * The version of the OpenAPI document: 1.1.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Box } from './Box';
import {
    BoxFromJSON,
    BoxFromJSONTyped,
    BoxToJSON,
} from './Box';
import type { ElementTimer } from './ElementTimer';
import {
    ElementTimerFromJSON,
    ElementTimerFromJSONTyped,
    ElementTimerToJSON,
} from './ElementTimer';
import type { SliderBlock } from './SliderBlock';
import {
    SliderBlockFromJSON,
    SliderBlockFromJSONTyped,
    SliderBlockToJSON,
} from './SliderBlock';
import type { SliderItem } from './SliderItem';
import {
    SliderItemFromJSON,
    SliderItemFromJSONTyped,
    SliderItemToJSON,
} from './SliderItem';
import type { SliderKind } from './SliderKind';
import {
    SliderKindFromJSON,
    SliderKindFromJSONTyped,
    SliderKindToJSON,
} from './SliderKind';

/**
 * Slider
 * @export
 * @interface Slider
 */
export interface Slider {
    /**
     * 
     * @type {SliderKind}
     * @memberof Slider
     */
    kind: SliderKind;
    /**
     * 
     * @type {ElementTimer}
     * @memberof Slider
     */
    timer: ElementTimer;
    /**
     * Sections for slider
     * @type {Array<SliderItem>}
     * @memberof Slider
     */
    items: Array<SliderItem>;
    /**
     * 
     * @type {SliderBlock}
     * @memberof Slider
     */
    styles: SliderBlock;
    /**
     * 
     * @type {Box}
     * @memberof Slider
     */
    box: Box;
}

/**
 * Check if a given object implements the Slider interface.
 */
export function instanceOfSlider(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "kind" in value;
    isInstance = isInstance && "timer" in value;
    isInstance = isInstance && "items" in value;
    isInstance = isInstance && "styles" in value;
    isInstance = isInstance && "box" in value;

    return isInstance;
}

export function SliderFromJSON(json: any): Slider {
    return SliderFromJSONTyped(json, false);
}

export function SliderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Slider {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'kind': SliderKindFromJSON(json['kind']),
        'timer': ElementTimerFromJSON(json['timer']),
        'items': ((json['items'] as Array<any>).map(SliderItemFromJSON)),
        'styles': SliderBlockFromJSON(json['styles']),
        'box': BoxFromJSON(json['box']),
    };
}

export function SliderToJSON(value?: Slider | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'kind': SliderKindToJSON(value.kind),
        'timer': ElementTimerToJSON(value.timer),
        'items': ((value.items as Array<any>).map(SliderItemToJSON)),
        'styles': SliderBlockToJSON(value.styles),
        'box': BoxToJSON(value.box),
    };
}

