/* tslint:disable */
/* eslint-disable */
/**
 * Onboarding online screens graph models
 * Onboarding online screens graph models and interfaces
 *
 * The version of the OpenAPI document: 1.1.0-alpha.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Box } from './Box';
import {
    BoxFromJSON,
    BoxFromJSONTyped,
    BoxToJSON,
} from './Box';
import type { FieldType } from './FieldType';
import {
    FieldTypeFromJSON,
    FieldTypeFromJSONTyped,
    FieldTypeToJSON,
} from './FieldType';
import type { LabelBlock } from './LabelBlock';
import {
    LabelBlockFromJSON,
    LabelBlockFromJSONTyped,
    LabelBlockToJSON,
} from './LabelBlock';
import type { PickerBlock } from './PickerBlock';
import {
    PickerBlockFromJSON,
    PickerBlockFromJSONTyped,
    PickerBlockToJSON,
} from './PickerBlock';
import type { PickerWheel } from './PickerWheel';
import {
    PickerWheelFromJSON,
    PickerWheelFromJSONTyped,
    PickerWheelToJSON,
} from './PickerWheel';

/**
 * Picker element
 * @export
 * @interface Picker
 */
export interface Picker {
    /**
     * 
     * @type {Box}
     * @memberof Picker
     */
    box: Box;
    /**
     * 
     * @type {FieldType}
     * @memberof Picker
     */
    dataType: FieldType;
    /**
     * 
     * @type {string}
     * @memberof Picker
     */
    currentValue: string;
    /**
     * Localized string
     * @type {{ [key: string]: string; }}
     * @memberof Picker
     */
    defaultValue: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof Picker
     */
    separator: string;
    /**
     * Picker wheels list
     * @type {Array<PickerWheel>}
     * @memberof Picker
     */
    wheels: Array<PickerWheel>;
    /**
     * 
     * @type {PickerBlock}
     * @memberof Picker
     */
    styles: PickerBlock;
    /**
     * 
     * @type {LabelBlock}
     * @memberof Picker
     */
    labelStyles: LabelBlock;
}

/**
 * Check if a given object implements the Picker interface.
 */
export function instanceOfPicker(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "box" in value;
    isInstance = isInstance && "dataType" in value;
    isInstance = isInstance && "currentValue" in value;
    isInstance = isInstance && "defaultValue" in value;
    isInstance = isInstance && "separator" in value;
    isInstance = isInstance && "wheels" in value;
    isInstance = isInstance && "styles" in value;
    isInstance = isInstance && "labelStyles" in value;

    return isInstance;
}

export function PickerFromJSON(json: any): Picker {
    return PickerFromJSONTyped(json, false);
}

export function PickerFromJSONTyped(json: any, ignoreDiscriminator: boolean): Picker {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'box': BoxFromJSON(json['box']),
        'dataType': FieldTypeFromJSON(json['dataType']),
        'currentValue': json['currentValue'],
        'defaultValue': json['defaultValue'],
        'separator': json['separator'],
        'wheels': ((json['wheels'] as Array<any>).map(PickerWheelFromJSON)),
        'styles': PickerBlockFromJSON(json['styles']),
        'labelStyles': LabelBlockFromJSON(json['labelStyles']),
    };
}

export function PickerToJSON(value?: Picker | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'box': BoxToJSON(value.box),
        'dataType': FieldTypeToJSON(value.dataType),
        'currentValue': value.currentValue,
        'defaultValue': value.defaultValue,
        'separator': value.separator,
        'wheels': ((value.wheels as Array<any>).map(PickerWheelToJSON)),
        'styles': PickerBlockToJSON(value.styles),
        'labelStyles': LabelBlockToJSON(value.labelStyles),
    };
}

