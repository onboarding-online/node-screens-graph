/* tslint:disable */
/* eslint-disable */
/**
 * Onboarding online screens graph models
 * Onboarding online screens graph models and interfaces
 *
 * The version of the OpenAPI document: 1.1.0-alpha.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Box } from './Box';
import {
    BoxFromJSON,
    BoxFromJSONTyped,
    BoxToJSON,
} from './Box';
import type { LoaderBlock } from './LoaderBlock';
import {
    LoaderBlockFromJSON,
    LoaderBlockFromJSONTyped,
    LoaderBlockToJSON,
} from './LoaderBlock';
import type { LoaderKind } from './LoaderKind';
import {
    LoaderKindFromJSON,
    LoaderKindFromJSONTyped,
    LoaderKindToJSON,
} from './LoaderKind';

/**
 * Loader parameters
 * @export
 * @interface Loader
 */
export interface Loader {
    /**
     * 
     * @type {Box}
     * @memberof Loader
     */
    box: Box;
    /**
     * 
     * @type {LoaderKind}
     * @memberof Loader
     */
    kind: LoaderKind;
    /**
     * 
     * @type {LoaderBlock}
     * @memberof Loader
     */
    styles: LoaderBlock;
}

/**
 * Check if a given object implements the Loader interface.
 */
export function instanceOfLoader(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "box" in value;
    isInstance = isInstance && "kind" in value;
    isInstance = isInstance && "styles" in value;

    return isInstance;
}

export function LoaderFromJSON(json: any): Loader {
    return LoaderFromJSONTyped(json, false);
}

export function LoaderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Loader {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'box': BoxFromJSON(json['box']),
        'kind': LoaderKindFromJSON(json['kind']),
        'styles': LoaderBlockFromJSON(json['styles']),
    };
}

export function LoaderToJSON(value?: Loader | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'box': BoxToJSON(value.box),
        'kind': LoaderKindToJSON(value.kind),
        'styles': LoaderBlockToJSON(value.styles),
    };
}

