/* tslint:disable */
/* eslint-disable */
/**
 * Onboarding online screens graph models
 * Onboarding online screens graph models and interfaces
 *
 * The version of the OpenAPI document: 1.1.0-alpha.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BaseNavLinkContent } from './BaseNavLinkContent';
import {
    BaseNavLinkContentFromJSON,
    BaseNavLinkContentFromJSONTyped,
    BaseNavLinkContentToJSON,
} from './BaseNavLinkContent';
import type { Box } from './Box';
import {
    BoxFromJSON,
    BoxFromJSONTyped,
    BoxToJSON,
} from './Box';
import type { NavLinkBlock } from './NavLinkBlock';
import {
    NavLinkBlockFromJSON,
    NavLinkBlockFromJSONTyped,
    NavLinkBlockToJSON,
} from './NavLinkBlock';
import type { NavLinkKind } from './NavLinkKind';
import {
    NavLinkKindFromJSON,
    NavLinkKindFromJSONTyped,
    NavLinkKindToJSON,
} from './NavLinkKind';

/**
 * Navigation link parameters
 * @export
 * @interface NavLink
 */
export interface NavLink {
    /**
     * 
     * @type {Box}
     * @memberof NavLink
     */
    box: Box;
    /**
     * 
     * @type {NavLinkKind}
     * @memberof NavLink
     */
    kind: NavLinkKind;
    /**
     * 
     * @type {BaseNavLinkContent}
     * @memberof NavLink
     */
    content: BaseNavLinkContent;
    /**
     * 
     * @type {NavLinkBlock}
     * @memberof NavLink
     */
    styles: NavLinkBlock;
    /**
     * The uri Link
     * @type {string}
     * @memberof NavLink
     */
    uri: string;
}

/**
 * Check if a given object implements the NavLink interface.
 */
export function instanceOfNavLink(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "box" in value;
    isInstance = isInstance && "kind" in value;
    isInstance = isInstance && "content" in value;
    isInstance = isInstance && "styles" in value;
    isInstance = isInstance && "uri" in value;

    return isInstance;
}

export function NavLinkFromJSON(json: any): NavLink {
    return NavLinkFromJSONTyped(json, false);
}

export function NavLinkFromJSONTyped(json: any, ignoreDiscriminator: boolean): NavLink {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'box': BoxFromJSON(json['box']),
        'kind': NavLinkKindFromJSON(json['kind']),
        'content': BaseNavLinkContentFromJSON(json['content']),
        'styles': NavLinkBlockFromJSON(json['styles']),
        'uri': json['uri'],
    };
}

export function NavLinkToJSON(value?: NavLink | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'box': BoxToJSON(value.box),
        'kind': NavLinkKindToJSON(value.kind),
        'content': BaseNavLinkContentToJSON(value.content),
        'styles': NavLinkBlockToJSON(value.styles),
        'uri': value.uri,
    };
}

